---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Sign Up - Astro Editor">
  <div class="container">
    <div class="auth-form">
      <h1>Create Account</h1>
      <form id="signup-form">
        <div class="form-group">
          <label for="username">Name</label>
          <input type="text" id="name" name="name" placeholder="Enter your name" required />
        </div>
        
        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" id="email" name="email" placeholder="Enter email" required />
        </div>
        
        <div class="form-group">
          <label for="password">Password</label>
          <input type="password" id="password" name="password" placeholder="Enter password" required />
        </div>
        
        <div class="form-group">
          <label for="confirmPassword">Confirm Password</label>
          <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm password" required />
        </div>
        
        <div id="error-message" class="error-message"></div>
        <button type="submit" class="btn-submit" id="signup-btn">Create Account</button>
      </form>
      
      <div class="auth-footer">
        Already have an account? <a href="/login">Log In</a>
      </div>
    </div>
  </div>
</Layout>

<script>
document.getElementById('signup-form').addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const name = document.getElementById('name').value;
  const email = document.getElementById('email').value;
  const password = document.getElementById('password').value;
  const confirmPassword = document.getElementById('confirmPassword').value;
  const errorElement = document.getElementById('error-message');
  const signupBtn = document.getElementById('signup-btn');
  
  errorElement.textContent = '';
  
  if (!name) {
    errorElement.textContent = 'Name is required';
    return;
  }
  
  if (!email) {
    errorElement.textContent = 'Email is required';
    return;
  }
  
  if (!password) {
    errorElement.textContent = 'Password is required';
    return;
  }
  
  if (password !== confirmPassword) {
    errorElement.textContent = 'Passwords do not match';
    return;
  }
  
  signupBtn.disabled = true;
  signupBtn.textContent = 'Creating account...';
  
  try {
    const response = await fetch('/api/signup', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ name, email, password })
    });
    
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.error || 'Registration failed');
    }
    
    console.log('Registration successful:', data);

    window.location.href = '/login?registered=true';
    
  } catch (error) {
    console.error('Registration error:', error);
    errorElement.textContent = error.message || 'Registration failed';
    signupBtn.disabled = false;
    signupBtn.textContent = 'Create Account';
  }
});
</script>

<style>
  .container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: calc(100vh - var(--navbar-height));
    padding: 1rem;
  }
  
  .auth-form {
    background-color: var(--secondary-bg);
    border-radius: 8px;
    padding: 2rem;
    width: 100%;
    max-width: 450px;
    box-shadow: 0 4px 10px var(--shadow-color);
  }
  
  h1 {
    color: var(--text-color);
    margin-bottom: 1.5rem;
    text-align: center;
    font-size: 1.8rem;
  }
  
  .form-group {
    margin-bottom: 1.2rem;
  }
  
  label {
    display: block;
    margin-bottom: 0.5rem;
    color: var(--text-color);
    font-size: 0.9rem;
  }
  
  input {
    width: 100%;
    padding: 10px;
    border-radius: 4px;
    border: 1px solid var(--border-color);
    background-color: var(--primary-bg);
    color: var(--text-color);
    font-size: 1rem;
    transition: border-color 0.2s ease;
  }
  
  input:focus {
    border-color: var(--accent-color);
    outline: none;
    box-shadow: 0 0 0 2px rgba(79, 158, 250, 0.2);
  }
  
  .error-message {
    color: #ff5555;
    font-size: 0.9rem;
    margin-bottom: 1rem;
    min-height: 1rem;
    text-align: center;
  }
  
  .btn-submit {
    width: 100%;
    padding: 12px;
    background-color: var(--accent-color);
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    font-weight: 500;
    margin-top: 0.5rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .btn-submit:hover:not(:disabled) {
    background-color: var(--accent-hover);
    transform: translateY(-2px);
  }
  
  .btn-submit:disabled {
    background-color: var(--text-muted);
    cursor: not-allowed;
  }
  
  .auth-footer {
    margin-top: 1.5rem;
    text-align: center;
    color: var(--text-muted);
    font-size: 0.9rem;
  }
  
  .auth-footer a {
    color: var(--accent-color);
    text-decoration: none;
    font-weight: 500;
  }
  
  .auth-footer a:hover {
    text-decoration: underline;
  }
</style>

<script>
  document.getElementById('signup-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const form = e.target;
    const name = form.name.value;
    const email = form.email.value;
    const password = form.password.value;
    const confirmPassword = form.confirmPassword.value;
    const errorEl = document.getElementById('error-message');
    
    // Clear previous errors
    errorEl.textContent = '';
    
    // Validate form
    if (password !== confirmPassword) {
      errorEl.textContent = 'Passwords do not match';
      return;
    }
    
    try {
      const response = await fetch('/api/signup', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ name, email, password })
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Registration failed');
      }
      
      // Redirect to login page or dashboard
      window.location.href = '/login?registered=true';
    } catch (error) {
      errorEl.textContent = error.message;
    }
  });
</script>