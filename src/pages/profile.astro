---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Profile - Astro Editor">
  <div class="container profile-container">
    <div id="login-required" style="display: none;">
      <h2>Login Required</h2>
      <p>Please <a href="/login">log in</a> to view this page.</p>
    </div>
    
    <div id="profile-content" style="display: none;">
      <h1>Profile Page</h1>
      <p>Your account information is displayed below.</p>
      
      <div class="profile-section mt-4">
        <h2>Your Progress</h2>
        <div class="progress-container">
          <div class="progress-bar-container">
            <div class="progress-info">
              <span>Solved: <span id="solved-count">0</span> / <span id="total-questions">0</span></span>
              <span id="progress-percentage">0%</span>
            </div>
            <div class="progress-outer">
              <div class="progress-inner" id="progress-bar" style="width: 0%"></div>
            </div>
          </div>
          
          <div class="recent-solved">
            <h3>Recently Solved Questions</h3>
            <div id="recent-solved-list" class="solved-list">
              <p class="loading-text">Loading your progress...</p>
            </div>
          </div>
        </div>
      </div>
      
      <div class="profile-section">
        <h2>Account Details</h2>
        <div class="profile-info">
          <div class="profile-field">
            <label>Name</label>
            <p id="profile-name">Loading...</p>
          </div>
          <div class="profile-field">
            <label>Email</label>
            <p id="profile-email">Loading...</p>
          </div>
          <div class="profile-field">
            <label>Member Since</label>
            <p id="profile-created">Loading...</p>
          </div>
        </div>
        
        <div class="buttons-container">
          <button class="btn-logout" id="profile-logout">Logout</button>
        </div>
      </div>
      
    </div>
  </div>
</Layout>

<script>
  function checkAuth() {
    const token = localStorage.getItem('token');
    const userStr = localStorage.getItem('user');
    
    const loginRequired = document.getElementById('login-required');
    const profileContent = document.getElementById('profile-content');
    
    if (!token || !userStr) {
      // Not logged in
      loginRequired.style.display = 'block';
      profileContent.style.display = 'none';
      return;
    }
    
    try {
      // User is logged in, display profile
      const user = JSON.parse(userStr);
      document.getElementById('profile-name').textContent = user.name || 'Not provided';
      document.getElementById('profile-email').textContent = user.email || 'Not provided';
      
      if (user.createdAt) {
        const date = new Date(user.createdAt);
        const options = { year: 'numeric', month: 'long', day: 'numeric' };
        document.getElementById('profile-created').textContent = date.toLocaleDateString(undefined, options);
      } else {
        document.getElementById('profile-created').textContent = 'Not available';
      }
      
      loginRequired.style.display = 'none';
      profileContent.style.display = 'block';
      
    } catch (error) {
      console.error('Error parsing user data:', error);
      loginRequired.style.display = 'block';
      profileContent.style.display = 'none';
    }
  }
  
  document.getElementById('profile-logout').addEventListener('click', () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    window.location.href = '/';
  });
  
  // Fetch and display progress
  async function loadUserProgress() {
    try {
      const token = localStorage.getItem('token');
      if (!token) return;
      
      // Get questions data for reference
      const questionsResponse = await fetch('/src/Questions/question.json');
      const questions = await questionsResponse.json();
      const totalQuestions = questions.length;
      document.getElementById('total-questions').textContent = totalQuestions;
      
      // Get user progress from API
      const progressResponse = await fetch(`/api/progress?token=${token}`);
      const progressData = await progressResponse.json();
      
      if (!progressData.progress) {
        document.getElementById('recent-solved-list').innerHTML = '<p>You have not solved any questions yet.</p>';
        return;
      }
      
      const solvedQuestions = progressData.progress;
      
      // Update solved count and percentage
      const solvedCount = solvedQuestions.length;
      document.getElementById('solved-count').textContent = solvedCount;
      
      const percentage = Math.round((solvedCount / totalQuestions) * 100);
      document.getElementById('progress-percentage').textContent = `${percentage}%`;
      document.getElementById('progress-bar').style.width = `${percentage}%`;
      
      // Display recently solved questions
      const recentSolvedList = document.getElementById('recent-solved-list');
      
      if (solvedQuestions.length === 0) {
        recentSolvedList.innerHTML = '<p>You have not solved any questions yet.</p>';
        return;
      }
      
      const solvedHTML = solvedQuestions.slice(0, 5).map(item => {
        const question = questions.find(q => q.id === item.questionId);
        if (!question) return '';
        
        const solvedDate = new Date(item.solvedAt).toLocaleDateString();
        
        return `
          <div class="solved-item">
            <div class="solved-info">
              <h4>Question ${question.id}: ${question.name}</h4>
              <div class="solved-meta">
                <span class="solved-difficulty">Difficulty: ${question.difficulty}</span>
                <span class="solved-date">Solved on ${solvedDate}</span>
              </div>
            </div>
          </div>
        `;
      }).join('');
      
      recentSolvedList.innerHTML = solvedHTML;
      
    } catch (error) {
      console.error('Error loading progress:', error);
      document.getElementById('recent-solved-list').innerHTML = '<p>Failed to load progress data.</p>';
    }
  }
  
  loadUserProgress();
  document.addEventListener('DOMContentLoaded', checkAuth);
  checkAuth(); // Also check immediately
</script>

<style>
.profile-container {
  max-width: 900px;
  margin: 3rem auto;
  padding: 0 1.5rem;
  min-height: calc(100vh - 6rem);
}

h1 {
  color: var(--text-color);
  font-size: 2.25rem;
  font-weight: 700;
  margin-bottom: 1.5rem;
  line-height: 1.2;
}

p {
  color: var(--text-muted);
  font-size: 1rem;
  line-height: 1.6;
  margin-bottom: 2rem;
}

.profile-section {
  background-color: var(--secondary-bg);
  border-radius: 12px;
  padding: 2rem;
  box-shadow: 0 6px 12px var(--shadow-color);
  border: 1px solid var(--border-color, rgba(0, 0, 0, 0.05));
  margin-bottom: 2rem;
}

h2 {
  margin-bottom: 1.25rem;
  font-size: 1.75rem;
  font-weight: 600;
  color: var(--accent-color);
  line-height: 1.3;
}

.profile-info {
  display: grid;
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.profile-field {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.profile-field label {
  font-size: 0.95rem;
  font-weight: 500;
  color: var(--text-muted);
  text-transform: uppercase;
  letter-spacing: 0.02em;
}

.profile-field p {
  font-size: 1.15rem;
  margin: 0;
  color: var(--text-color);
  font-weight: 400;
}

.buttons-container {
  display: flex;
  gap: 1rem;
  justify-content: flex-start;
  flex-wrap: wrap;
}

.btn-edit, .btn-logout {
  padding: 12px 24px;
  border-radius: 6px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  text-decoration: none;
}

.btn-edit {
  background-color: var(--accent-color);
  color: white;
  border: none;
}

.btn-edit:hover {
  background-color: var(--accent-hover);
  transform: translateY(-3px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.btn-logout {
  background-color: transparent;
  border: 2px solid #e74c3c;
  color: #e74c3c;
}

.btn-logout:hover {
  background-color: #e74c3c;
  color: white;
  transform: translateY(-3px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

#login-required {
  text-align: center;
  padding: 4rem 2rem;
  background-color: var(--secondary-bg);
  border-radius: 12px;
  box-shadow: 0 6px 12px var(--shadow-color);
  margin: 3rem auto;
  max-width: 500px;
}

#login-required h2 {
  font-size: 1.75rem;
  margin-bottom: 1.5rem;
  color: var(--text-color);
}

#login-required p {
  font-size: 1.1rem;
  margin-bottom: 2rem;
}

#login-required a {
  color: var(--accent-color);
  font-weight: 600;
  text-decoration: none;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  transition: background-color 0.2s ease;
}

#login-required a:hover {
  background-color: rgba(var(--accent-color), 0.1);
  text-decoration: none;
}

.progress-container {
  display: grid;
  gap: 2rem;
}

.progress-bar-container {
  background-color: var(--secondary-bg);
  padding: 1.5rem;
  border-radius: 8px;
}

.progress-info {
  display: flex;
  justify-content: space-between;
  margin-bottom: 1rem;
  font-size: 1rem;
  font-weight: 500;
  color: var(--text-color);
}

.progress-outer {
  background-color: #e0e0e0;
  border-radius: 20px;
  overflow: hidden;
  height: 12px;
}

.progress-inner {
  background-color: var(--accent-color);
  height: 100%;
  transition: width 0.5s ease;
}

.recent-solved h3 {
  font-size: 1.25rem;
  margin-bottom: 1rem;
  color: var(--text-color);
}

.solved-list {
  display: grid;
  gap: 1rem;
}

.solved-item {
  background-color: var(--secondary-bg);
  padding: 1rem;
  border-radius: 8px;
  border: 1px solid var(--border-color, rgba(0, 0, 0, 0.05));
}

.solved-info h4 {
  font-size: 1.1rem;
  margin-bottom: 0.5rem;
  color: var(--text-color);
}

.solved-meta {
  display: flex;
  gap: 1rem;
  font-size: 0.9rem;
  color: var(--text-muted);
}
</style>
